/* Part 2: Creating and destroying objects using pointers */

/* Output from program run */

Print poly by reference:   0   2   4   6   8  10  12  14  16  18 
Print poly by value:   0   2   4   6   8  10  12  14  16  18 
Print poly by reference:   0   2   4   6   8  10  12  14  16  18 
Print poly by value:   0   2   4   6   8  10  12  14  16  18 


/* Output from valgrind run on lab_b program */

==28130== Memcheck, a memory error detector
==28130== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==28130== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==28130== Command: ./lab_b
==28130== 
Print poly by reference:   0   2   4   6   8  10  12  14  16  18 
Print poly by value:   0   2   4   6   8  10  12  14  16  18 
Print poly by reference:   0   2   4   6   8  10  12  14  16  18 
Print poly by value:   0   2   4   6   8  10  12  14  16  18 
==28130== 
==28130== HEAP SUMMARY:
==28130==     in use at exit: 0 bytes in 0 blocks
==28130==   total heap usage: 3 allocs, 3 frees, 176 bytes allocated
==28130== 
==28130== All heap blocks were freed -- no leaks are possible
==28130== 
==28130== For lists of detected and suppressed errors, rerun with: -s
==28130== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
Print poly by reference:   0   2   4   6   8  10  12  14  16  18 
Print poly by value:   0   2   4   6   8  10  12  14  16  18 
Print poly by reference:   0   2   4   6   8  10  12  14  16  18 
Print poly by value:   0   2   4   6   8  10  12  14  16  18 



/* Part 3: Simple linked lists using pointer */

/* Output from program run */
Printing 1 node linked list
Node 1 contains the string 'One'

Printing 2 node linked list
Node 1 contains the string 'One'
Node 2 contains the string 'Two'

Clean up

/* Output from valgrind mem check */
==32015== Memcheck, a memory error detector
==32015== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==32015== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==32015== Command: ./lab_c
==32015== 
Printing 1 node linked list
Node 1 contains the string 'One'

Printing 2 node linked list
Node 1 contains the string 'One'
Node 2 contains the string 'Two'

Clean up
==32015== 
==32015== HEAP SUMMARY:
==32015==     in use at exit: 0 bytes in 0 blocks
==32015==   total heap usage: 3 allocs, 3 frees, 128 bytes allocated
==32015== 
==32015== All heap blocks were freed -- no leaks are possible
==32015== 
==32015== For lists of detected and suppressed errors, rerun with: -s
==32015== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)


DONE...
