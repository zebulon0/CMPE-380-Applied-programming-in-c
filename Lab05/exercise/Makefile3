############################################################
# This make file demonstrated all special variables
# student copy
############################################################

# Standard compile flags
CC       = gcc
CFLAGS   = -O1 -g -Wall -std=c99 -pedantic
SOURCE	 = a.c b.c c.c
OBJS 	 = $(patsubst %.c, %.o, $(SOURCE))
PROG1	 = bin1
PROG2    = bin2
VALGRIND = valgrind --tool=memcheck --leak-check=yes --track-origins=yes

# This demonstrates the returned target name
# $@ to represent the full target name of the current target
target1: target2
	@echo "Target name is '$@'"

#$? returns the dependencies that are newer than the current target
$(PROG1): $(SOURCE)
	@echo "Dependency change for bin1 is '$?'"
	$(CC) $(SOURCE) -o $(PROG1)
   

#$^ returns the names of all the dependencies with space as the delimiter
#$< returns the name of the first dependency
$(PROG2): $(OBJS)
	@echo "Linking '$^' to '$@'"
	@echo "The first dependency of '$^' is '$<'"
	gcc $^ -o $@
 
# This checks the associated .c files for the passed .o files
# assumes CC and CFLAGS variable for the passed list of objects
#.c.o:
#	@echo "Compiling '$*'"
#	gcc $*.c -c
 
# This checks the associated .c files and o files, similar to
# the .c.o: rule but gives more control
%.o : %.c
	@echo "Dependency change is '$*'"
	gcc $*.c -c

# This rule really does a multi-comparison of all of the object 
# against all the the source file.  It doesn't compile the minimum
# set
#a.o b.o c.o : a.c b.c c.c
#	@echo "Compiling '$*.c'"
#	gcc $*.c -c

mem: $(PROG2)
	@echo "Running valgrind"
	$(VALGRIND) ./$(PROG2) > mem.txt 2>&1
	cat mem.txt
clean:
	-rm -f *.o bin1 bin2
   


