---------------------------------
-				-
-	InLab Exercises		-
-				-
---------------------------------


----------
- MACROS -
----------

/* first compile and run of lab_b.c */
Looping variable 'i3'
0
1
2
Looping variable 'i3'
0
1
2
Looping variable 'ii'
0
1

/* Now using the -E and -P expansion flags */

/* expanded macro code */

int main(int argc, char *argv[]) {
   int i = 2;
   { int i3; printf("Looping variable 'i%s'\n", "3"); for(i3=0; i3 < 3; i3++) { printf("%d\n",i3); } };
   { int i3; printf("Looping variable 'i%s'\n", "3"); for(i3=0; i3 < 3; i3++) { printf("%d\n",i3); } };
   { int ii; printf("Looping variable 'i%s'\n", "i"); for(ii=0; ii < i; ii++) { printf("%d\n",ii); } };
   return(0);
}

/* original C code */
#define MACRO1(N)				\
    { int i ## N;				\
      printf("Looping variable '%s'\n", #N);	\
      for(i ## N=0; i ## N < N; i ## N++) {	\
      printf("%d\n", i ## N);			\
    } /* End for */ } /* End macro */

#if TEST==1
int main(int argc, char *argv[]) {
   int i = 2;
   /* The looping variable will be _t_3 */
   MACRO1(3);
   MACRO1(3);
   MACRO1(i);
   return(0);
}


/* Compiling with -DTEST=2 */
The error that occurred was the variable "var" is undeclared.

/* Recompile with flags and no -o */
The issue is that the "var" in the main print statement does not have
a '_' which makes the compiler look for an actual var variable. Since it 
hasn't been defined, there is a compile error because the compiler cannot
find a line where the var variable is initialized.

int charCount(char *str);
void f2();
int main(int argc, char *argv[]) {
   {int _var = 10; printf("var in f1: %d\n", var);};
   return(0);
}
void f2() {
   int var1 = 5;
   printf("var1 in f2: %d\n", var1);
}
int charCount(char *str) {
   return(strlen(str));
}

/* Fix code and recompile */
No issues...

/* Output of ./lab_b2 */
var in f1: 10

/* recompile with -DTEST=3 enabled */
It does not print 50, but instead it prints 30...

int charCount(char *str);
void f2();
int main(int argc, char *argv[]) {
   int n = 5;
   int m = (n + 5 * 5);
   printf("MUL_FIVE: %d\n", m);
}
void f2() {
   int var1 = 5;
   printf("var1 in f2: %d\n", var1);
}

The macro expansion of the MUL_FIVE() function made the m int turn into
"n+5*5" which means the the multiplication happens first which makes m
become 5 + 25 = 30 instead of the desired 50.

/* Recompile with TEST=4 */

int main(int argc, char *argv[]) {
   int x = -5;
   int result = ((x++) < 0 ? -(x++) : (x++));
   printf("RESULT: %d\n", result);
   printf("X IS: %d\n", x);
   return(0);
}

/* program output */
RESULT: 4
X IS: -3

The ABS function operates like this: if x++ < 0, then the output is -(x++),
else, the output is (x++)... so the result value becomes -(-4) because x++=-4

???? Not sure why x=-3 though......????????

/* recompile with TEST=5 */
int main(int argc, char *argv[]) {
   char *str1 = "Hi", *str2 = "Hello";
   int minCharCount = ((charCount(str1)) < (charCount(str2)) ? (charCount(str1)) : (charCount(str2)));
   printf("Minimum char count of(%s, %s): %d\n", str1, str2, minCharCount);
   return(0);
}
int charCount(char *str) {
   return(strlen(str));
}

/* program output */
Minimum char count of(Hi, Hello): 2

Makes sense, if "Hi" is less than "Hello" then return length of "Hi"
which is 2 so that checks out!

There seems to be 4 charCount function substitutions from the macro, 
but only 3 of the functions were executed. Since the last 2 function calls
were conditional, only one of them would be called at a time. Not both...


-------------
- 2D Arrays -
-------------

/* compile the lab_c.c code... does it run correctly? any bugs? */
No compile issues. No apparent bugs to me.. Thte program output is 
essentially the 2D array that was created. Each entry is a double and 
that value is the row index + column index / 10.0... So A[2][4] is the
last entry in the array and its value is 2.0 + 4.0/10.0 = 2.4

/* Program output */
The 3x5 2D dynamic matrix
 0.0	 0.1	 0.2	 0.3	 0.4	
 1.0	 1.1	 1.2	 1.3	 1.4	
 2.0	 2.1	 2.2	 2.3	 2.4	

/* valgrind output */

==9109== Memcheck, a memory error detector
==9109== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==9109== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==9109== Command: ./lab_c
==9109== 
The 3x5 2D dynamic matrix
 0.0	 0.1	 0.2	 0.3	 0.4	
 1.0	 1.1	 1.2	 1.3	 1.4	
 2.0	 2.1	 2.2	 2.3	 2.4	
==9109== 
==9109== HEAP SUMMARY:
==9109==     in use at exit: 144 bytes in 4 blocks
==9109==   total heap usage: 4 allocs, 0 frees, 144 bytes allocated
==9109== 
==9109== 144 (24 direct, 120 indirect) bytes in 1 blocks are definitely lost in loss record 2 of 2
==9109==    at 0x4C29F73: malloc (vg_replace_malloc.c:309)
==9109==    by 0x400603: main (lab_c.c:25)
==9109== 
==9109== LEAK SUMMARY:
==9109==    definitely lost: 24 bytes in 1 blocks
==9109==    indirectly lost: 120 bytes in 3 blocks
==9109==      possibly lost: 0 bytes in 0 blocks
==9109==    still reachable: 0 bytes in 0 blocks
==9109==         suppressed: 0 bytes in 0 blocks
==9109== 
==9109== For lists of detected and suppressed errors, rerun with: -s
==9109== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)

The error is that the memory that is allocated for the array is lost and
still in use when the program exits. This most likely has to do with the
fact that there are 4 allocs and 0 frees. Generally, each alloc should have
a matching free when the data is done being used in the progam.


/* implement a simple "free(A)" and recompile / rerun valgrind */
==12247== Memcheck, a memory error detector
==12247== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==12247== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==12247== Command: ./lab_c
==12247== 
The 3x5 2D dynamic matrix
 0.0	 0.1	 0.2	 0.3	 0.4	
 1.0	 1.1	 1.2	 1.3	 1.4	
 2.0	 2.1	 2.2	 2.3	 2.4	
==12247== 
==12247== HEAP SUMMARY:
==12247==     in use at exit: 120 bytes in 3 blocks
==12247==   total heap usage: 4 allocs, 1 frees, 144 bytes allocated
==12247== 
==12247== 120 bytes in 3 blocks are definitely lost in loss record 1 of 1
==12247==    at 0x4C29F73: malloc (vg_replace_malloc.c:309)
==12247==    by 0x400676: main (lab_c.c:29)
==12247== 
==12247== LEAK SUMMARY:
==12247==    definitely lost: 120 bytes in 3 blocks
==12247==    indirectly lost: 0 bytes in 0 blocks
==12247==      possibly lost: 0 bytes in 0 blocks
==12247==    still reachable: 0 bytes in 0 blocks
==12247==         suppressed: 0 bytes in 0 blocks
==12247== 
==12247== For lists of detected and suppressed errors, rerun with: -s
==12247== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)

This fixed only 24 bytes of the total 144 bytes that are lost. It *improved*
the problems that were occurring earlier, but there are still memory leaks
that need to be fixed.

/* comment out simple free and write free_matrix_space() */

==30578== Memcheck, a memory error detector
==30578== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==30578== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==30578== Command: ./lab_c
==30578== 
The 3x5 2D dynamic matrix
 0.0	 0.1	 0.2	 0.3	 0.4	
 1.0	 1.1	 1.2	 1.3	 1.4	
 2.0	 2.1	 2.2	 2.3	 2.4	
==30578== 
==30578== HEAP SUMMARY:
==30578==     in use at exit: 0 bytes in 0 blocks
==30578==   total heap usage: 4 allocs, 4 frees, 144 bytes allocated
==30578== 
==30578== All heap blocks were freed -- no leaks are possible
==30578== 
==30578== For lists of detected and suppressed errors, rerun with: -s
==30578== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)

No more issues!! All mem was freed correctly!

/* add 5 rows to existing matrix dynamically */
/* program output */

The 3x5 2D dynamic matrix
 0.0	 0.1	 0.2	 0.3	 0.4	
 1.0	 1.1	 1.2	 1.3	 1.4	
 2.0	 2.1	 2.2	 2.3	 2.4	
The 8x5 2D dynamic matrix
 0.0	 0.1	 0.2	 0.3	 0.4	
 1.0	 1.1	 1.2	 1.3	 1.4	
 2.0	 2.1	 2.2	 2.3	 2.4	
-3.0	-2.9	-2.8	-2.7	-2.6	
-4.0	-3.9	-3.8	-3.7	-3.6	
-5.0	-4.9	-4.8	-4.7	-4.6	
-6.0	-5.9	-5.8	-5.7	-5.6	
-7.0	-6.9	-6.8	-6.7	-6.6	

/* now for valgrind... */

==10367== Memcheck, a memory error detector
==10367== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==10367== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==10367== Command: ./lab_c
==10367== 
The 3x5 2D dynamic matrix
 0.0	 0.1	 0.2	 0.3	 0.4	
 1.0	 1.1	 1.2	 1.3	 1.4	
 2.0	 2.1	 2.2	 2.3	 2.4	
The 8x5 2D dynamic matrix
 0.0	 0.1	 0.2	 0.3	 0.4	
 1.0	 1.1	 1.2	 1.3	 1.4	
 2.0	 2.1	 2.2	 2.3	 2.4	
-3.0	-2.9	-2.8	-2.7	-2.6	
-4.0	-3.9	-3.8	-3.7	-3.6	
-5.0	-4.9	-4.8	-4.7	-4.6	
-6.0	-5.9	-5.8	-5.7	-5.6	
-7.0	-6.9	-6.8	-6.7	-6.6	
==10367== 
==10367== HEAP SUMMARY:
==10367==     in use at exit: 0 bytes in 0 blocks
==10367==   total heap usage: 10 allocs, 10 frees, 408 bytes allocated
==10367== 
==10367== All heap blocks were freed -- no leaks are possible
==10367== 
==10367== For lists of detected and suppressed errors, rerun with: -s
==10367== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)

No errors! Woohoo!!
