----------
- prelab -
----------

1. Explain the difference between the allocation and deallocation approaches
of lab 6 lab_c.c and this example lab_a.c

lab_c.c : The double pointer mallocs for space of the number of 
rows * sizeof a double. Then it loops through and mallocs space for 
each row based off of the column size. Deallocation is done by freeing
the memory for each row pointer and then freeing the double pointer at
the end. 

lab_a.c : malloc for double pointer, a second pointer is calloc'd for the
entire size of the array (row*col*sizeof(double)). Then the each row pointer
is assigned by using the "ptr + cols*i" where "i" is the current row index.
Deallocation is done similarly where the ptr for all the matrix memory at the
location A[0] is freed followed by freeing the double pointer. 

The lab_a way is a lot faster implementation of 2D array memory management.
This is all because of the way it is done. The entire array memory is
allocated at one time instead of allocating memory for each row at a time. 
Because of that, deallocation is simple because the base address of the array
can be used to free which frees all the memory for the 2D array. That just
leaves the double pointer to be freed which saves a lot of time compared to
the lab_c way which iterates through all the rows and frees the memory tied
to each specific row... Less for loops = faster execution.



2. Build lab_c.c and lab_a.c and verify that they are functioning

./lab_a

The 3x5 2D dynamic matrix
 0.0	 0.1	 0.2	 0.3	 0.4	
 1.0	 1.1	 1.2	 1.3	 1.4	
 2.0	 2.1	 2.2	 2.3	 2.4	

./lab_c

The 3x5 2D dynamic matrix
 0.0	 0.1	 0.2	 0.3	 0.4	
 1.0	 1.1	 1.2	 1.3	 1.4	
 2.0	 2.1	 2.2	 2.3	 2.4	


3. Run valgrind for both applications. Verify that there are no mem issues..

lab_a.c

==16009== Memcheck, a memory error detector
==16009== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==16009== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==16009== Command: ./lab_a
==16009== 
The 3x5 2D dynamic matrix
 0.0	 0.1	 0.2	 0.3	 0.4	
 1.0	 1.1	 1.2	 1.3	 1.4	
 2.0	 2.1	 2.2	 2.3	 2.4	
==16009== 
==16009== HEAP SUMMARY:
==16009==     in use at exit: 0 bytes in 0 blocks
==16009==   total heap usage: 2 allocs, 2 frees, 144 bytes allocated
==16009== 
==16009== All heap blocks were freed -- no leaks are possible
==16009== 
==16009== For lists of detected and suppressed errors, rerun with: -s
==16009== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)


now lab_c.c

==16522== Memcheck, a memory error detector
==16522== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==16522== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==16522== Command: ./lab_c
==16522== 
The 3x5 2D dynamic matrix
 0.0	 0.1	 0.2	 0.3	 0.4	
 1.0	 1.1	 1.2	 1.3	 1.4	
 2.0	 2.1	 2.2	 2.3	 2.4	
==16522== 
==16522== HEAP SUMMARY:
==16522==     in use at exit: 0 bytes in 0 blocks
==16522==   total heap usage: 4 allocs, 4 frees, 144 bytes allocated
==16522== 
==16522== All heap blocks were freed -- no leaks are possible
==16522== 
==16522== For lists of detected and suppressed errors, rerun with: -s
==16522== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)


Here you can see how lab_a is more efficient because it has 2 memory
operations each where lab_c has 4. lab_a can be inferred to be 2X faster
because of that. Obviously a real conclusion can only be made when it is
actually timed to verify it, but at a surface level it seems like this
memory management would be 2X faster than lab_c.c. 


